from .observation import Observation
from ..src import constants
from datetime import datetime


def resolve_name(vulnerability_dict, language):
    if language == 'eng':
        return vulnerability_dict['english_name']
    elif language == 'spa':
        return vulnerability_dict['spanish_name']


class Vulnerability:

    # Description is the string that will be sent to slack/redmine/report
    def __init__(self, vulnerability_dict, info, custom_description):
        status = 1
        if "[BURP SCAN]" in vulnerability_dict:
            self.vulnerability_name = vulnerability_dict
            status = 12 #Requiere validacion manual
        elif self.vulnerability_name != constants.BURP_SCAN['english_name']:
            self.observation = Observation(self.vulnerability_name, info['language'])
        else:
            self.vulnerability_name = resolve_name(vulnerability_dict, info['language'])

        self.language = info['language']
        self.target = info['target']
        self.scanned_url = info['url_to_scan']
        self.time = datetime.now()
        self.custom_description = custom_description
        self.image_string = None
        self.file_string = None

        assigned_to = None
        if info['assigned_users']:
            assigned_to = int(info['assigned_users'][0])
        watchers = None
        if info['watchers']:
            watchers = [int(i) for i in info['watchers']]
        self.redmine = {
            'project_id': info['redmine_project'],
            'tracker_id': 0,  # Hardcoded number
            'status_id': status,  # Hardcoded number
            'priority_id': self.resolve_priority(),
            'assigned_to': assigned_to,
            'watchers': watchers,
            'attachment_path': None,
            'attachment_name': None
        }
        return

    def resolve_priority(self):
        severity_dict = {'INFORMATIONAL': 1, 'LOW': 2, 'MEDIUM': 3, 'HIGH': 4, 'CRITICAL': 5}
        try:
            return severity_dict[self.observation.severity]
        except (KeyError,AttributeError):
            return 1

    def add_attachment(self, attachment_path, attachment_name):
        self.redmine['attachment_path'] = attachment_path
        self.redmine['attachment_name'] = attachment_name

    def add_image_string(self, image_string):
        self.image_string = image_string

    def add_file_string(self, file_string):
        self.file_string = file_string

